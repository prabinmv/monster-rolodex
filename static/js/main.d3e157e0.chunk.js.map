{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBACIC,IAAI,UACJC,IAAI,iDAEZ,6BAAKH,EAAMI,QAAQC,OACnB,4BAAIL,EAAMI,QAAQE,YCLTC,G,MAAW,SAACP,GAAD,OACnB,qBAAKC,UAAY,YAAjB,SACED,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAAK,cAAC,EAAD,CAA6BA,QAASA,GAArBA,EAAQM,WCHlDC,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAY,SAASa,KAAK,SAASF,YAAcA,EACxDG,SAAYF,MCmCDG,E,kDAjCb,aAAc,IAAD,8BACX,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAO,CACVd,SAAW,GACXW,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAK1C,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAAIA,EAAQC,KAAK0B,cAAcC,SAASb,EAAYY,kBAEpG,OACA,sBAAK9B,UAAU,MAAf,UACA,mDACA,cAAC,EAAD,CACEW,YAAc,iBACdC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUL,SAAWqB,W,GA5BPI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3e157e0.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n    <div className = \"card-container\">\n        <img \n            alt='monster' \n            src='https://robohash.org/2?set=set2&size=100x100'\n        />\n    <h3>{props.monster.name}</h3>\n    <p>{props.monster.email}</p>\n    </div>\n)\n\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.style.css';\n\nexport const CardList = (props) => \n    (<div className = \"card-list\">\n    {  props.monsters.map(monster => (<Card key =     {monster.id} monster={monster}/>))\n    }\n    </div>)","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className = 'search' type='search' placeholder={ placeholder } \n    onChange= { handleChange }/>\n);\n    \n    \n","import {CardList} from './components/card-list/card-list.component.jsx'\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nimport React, {Component} from 'react';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state= {\n      monsters : [],\n      searchField: ''\n    };\n    \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}) );\n  }\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return(\n    <div className=\"App\"> \n    <h1> monster rolodex </h1>\n    <SearchBox\n      placeholder = 'search monster'\n      handleChange = {this.handleChange} \n    />\n    <CardList monsters= {filteredMonsters}/>   \n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}